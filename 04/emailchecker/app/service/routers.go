/*
 * User Service
 *
 * This is simple client API
 *
 * API version: 1.0.0
 * Contact: schetinnikov@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package service

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/prometheus/client_golang/prometheus/promhttp"

	"github.com/gorilla/mux"
)

type Route struct {
	Name    string
	Method  string
	Pattern string
	Handler http.Handler
}

type CheckRequest struct {
	Email string `json:"email"`
}

type CheckResponse struct {
	IsValid bool `json:"is_valid"`
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)

	var routes = Routes{
		Route{
			"Index",
			"GET",
			"/api/v1/",
			http.HandlerFunc(Index),
		},

		Route{
			"Metrics",
			"GET",
			"/metrics",
			promhttp.Handler(),
		},

		Route{
			"CheckEmail",
			"GET",
			"/check",
			http.HandlerFunc(CheckEmail),
		},
	}
	for _, route := range routes {
		var handler http.Handler
		handler = route.Handler
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}
	router.PathPrefix("/").Handler(Logger(http.HandlerFunc(Default), "unknown"))
	return router
}

func Default(w http.ResponseWriter, r *http.Request) {
	http.Error(w, "Not found", 404)
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

func CheckEmail(w http.ResponseWriter, r *http.Request) {
	var request CheckRequest
	err := json.NewDecoder(r.Body).Decode(&request)
	if err != nil {
		http.Error(w, "Wrong request format", http.StatusBadRequest)
		return
	}

	response := CheckResponse{strings.Contains(request.Email, "@")}
	writeJsonResponse(w, response)
}

func writeJsonResponse(w http.ResponseWriter, s interface{}) error {
	//w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	jsonPayload, err := json.Marshal(s)
	if err != nil {
		return err
	}
	w.Write(jsonPayload)
	return nil
}
