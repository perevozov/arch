/*
 * User Service
 *
 * This is simple client API
 *
 * API version: 1.0.0
 * Contact: schetinnikov@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package model

import (
	"crypto/sha1"
	"database/sql"
	"encoding/hex"
	"errors"
	"fmt"
	"log"
	"strings"
)

type User struct {
	Id           int64   `json:"id,omitempty"`
	Username     *string `json:"username,omitempty"`
	FirstName    *string `json:"firstName,omitempty" db:"first_name"`
	LastName     *string `json:"lastName,omitempty" db:"last_name"`
	Email        *string `json:"email,omitempty"`
	Phone        *string `json:"phone,omitempty"`
	PasswordHash *string `json:"-" db:"password_hash"`
}

func (db *DB) AddUser(user *User) (int64, error) {
	result, err := db.NamedExec(
		`INSERT INTO 
			user (username, first_name, last_name, email, phone) 
		VALUES
			(:username, :first_name, :last_name, :email, :phone)`, user)

	if err != nil {
		return 0, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return 0, err
	}
	user.Id = id

	return id, nil
}

func (db *DB) SetUserPassword(user *User, password string) error {
	passwordHash := getPasswordHash(password)
	_, err := db.Exec(
		`UPDATE user SET password_hash = ? where id = ?`,
		passwordHash, user.Id)

	return err
}

func (db *DB) CheckUserPassword(username string, password string) (*User, error) {
	user := &User{}
	passwordHash := getPasswordHash(password)
	err := db.Get(
		user,
		"SELECT * FROM user WHERE username = ? AND password_hash = ? ",
		username,
		passwordHash,
	)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrUserNotFound
		}
		log.Printf("Database error: %s", err)
		return nil, ErrDB
	}

	return user, nil
}

func (db *DB) UpdateUser(user *User) error {
	if user.Id == 0 {
		return errors.New("User Id should be positive")
	}

	var setValues []string
	if user.Username != nil {
		setValues = append(setValues, "username = :username")
	}
	if user.FirstName != nil {
		setValues = append(setValues, "first_name = :first_name")
	}
	if user.LastName != nil {
		setValues = append(setValues, "last_name = :last_name")
	}
	if user.Email != nil {
		setValues = append(setValues, "email = :email")
	}
	if user.Phone != nil {
		setValues = append(setValues, "phone = :phone")
	}
	if len(setValues) == 0 {
		return errors.New("Nothing to update")
	}

	query := fmt.Sprintf(`UPDATE user SET %s WHERE id = :id`, strings.Join(setValues, " "))
	_, err := db.NamedExec(query, user)
	if err != nil {
		return err
	}

	return nil
}

func (db *DB) DeleteUser(userID int64) error {
	result, err := db.Exec(fmt.Sprintf("DELETE FROM user WHERE id = %d", userID))
	if err != nil {
		return err
	}
	if ra, _ := result.RowsAffected(); ra == 0 {
		return ErrUserNotFound
	}
	return nil
}

func (db *DB) LoadUserWithId(userID int64) (*User, error) {
	user := &User{}
	err := db.Get(user, fmt.Sprintf("SELECT * FROM user WHERE id = %d", userID))
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrUserNotFound
		}
		log.Printf("Database error: %s", err)
		return nil, ErrDB
	}

	return user, nil
}

func getPasswordHash(s string) string {
	h := sha1.New()
	h.Write([]byte(s))
	hashsum := h.Sum(nil)

	return hex.EncodeToString(hashsum)
}
